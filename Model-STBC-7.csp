#import "PAT.Lib.RCSPv17";
 
#define PNodes 4;
#define T 2;
	
Consensus_Protocol() = (||i:{0..PNodes-1}@(NodeInitialization(); PerformTransactions(); Selection(); VoteForTransactions(T, i); ProposeAndBroadcast(i); VoteToBlock(i); isValidBlockchain(); AddBlock(i); UpdateTrustAndDeposit())); NextRound();


#define maxDeposit 100; 
#define minDeposit 10;
#define minNumActivities 0;
#define maxNumActivities 100;
#define minNumMisses 0;
#define maxNumMisses 100;
var<ManagementNode> managementNode;
var<ManagementNodes> managementNodes;
var<ProviderNode> providerNode;
var<ProviderNodes> providerNodes;
var<ConsumerNode> consumerNode;
var<ConsumerNodes> consumerNodes;
var<ValidatorNodes> validatorNodes;

NodeInitialization() = (Node1(0, 20, 0, 0); Node2(1, 30, 0, 0); Node3(2, 15, 0); Node4(3, 20, 0); Node5(4, 10, 0); Node6(5, 30, 0); Node7(6, 20, 0));

Node1(id, deposit, numActivities, numMisses) = [id >= 0 && deposit >= minDeposit && deposit <= maxDeposit && numActivities >= minNumActivities && numActivities <= maxNumActivities && numMisses >= minNumMisses && numMisses <= maxNumMisses] add1 {
				var m1 = new ManagementNode(id, deposit, numActivities, numMisses);
				managementNodes.Add(m1);
				validatorNodes.AddNode(new ValidatorNode(id, deposit, numActivities, numMisses, m1));
				} -> Skip;

Node2(id, deposit, numActivities, numMisses) = [id >= 0 && deposit >= minDeposit && deposit <= maxDeposit && numActivities >= minNumActivities && numActivities <= maxNumActivities && numMisses >= minNumMisses && numMisses <= maxNumMisses] add2 {
				var m1 = new ManagementNode(id, deposit, numActivities, numMisses);
				managementNodes.Add(m1);
				validatorNodes.AddNode(new ValidatorNode(id, deposit, numActivities, numMisses, m1));
				} -> Skip;
				
Node3(id, deposit, numActivities) = [id >= 0 && deposit >= minDeposit && deposit <= maxDeposit && numActivities >= minNumActivities && numActivities <= maxNumActivities] add3 {
				var v1 = new ProviderNode(id, deposit, numActivities);
				providerNodes.Add(v1);
				validatorNodes.AddNode(new ValidatorNode(id, deposit, numActivities, v1));
				} -> Skip;

Node4(id, deposit, numActivities) = [id >= 0 && deposit >= minDeposit && deposit <= maxDeposit && numActivities >= minNumActivities && numActivities <= maxNumActivities] add4 {
				var v1 = new ProviderNode(id, deposit, numActivities);
				providerNodes.Add(v1);
				validatorNodes.AddNode(new ValidatorNode(id, deposit, numActivities, v1));
				} -> Skip;

Node5(id, deposit, numActivities) = [id >= 0 && deposit >= minDeposit && deposit <= maxDeposit && numActivities >= minNumActivities && numActivities <= maxNumActivities] add5 {
				var c1 = new ConsumerNode(id, deposit, numActivities);
				consumerNodes.Add(c1);
				validatorNodes.AddNode(new ValidatorNode(id, deposit, numActivities, c1));
				} -> Skip;

Node6(id, deposit, numActivities) = [id >= 0 && deposit >= minDeposit && deposit <= maxDeposit && numActivities >= minNumActivities && numActivities <= maxNumActivities] add6 {
				var c1 = new ConsumerNode(id, deposit, numActivities);
				consumerNodes.Add(c1);
				validatorNodes.AddNode(new ValidatorNode(id, deposit, numActivities, c1));
				} -> Skip;
				
Node7(id, deposit, numActivities) = [id >= 0 && deposit >= minDeposit && deposit <= maxDeposit && numActivities >= minNumActivities && numActivities <= maxNumActivities] add7 {
				var c1 = new ConsumerNode(id, deposit, numActivities);
				consumerNodes.Add(c1);
				validatorNodes.AddNode(new ValidatorNode(id, deposit, numActivities, c1));
				} -> Skip;

var not_post; var post; var receive; var perform; var evaluate; var taccept; var treject; var finish;
//             0         1      2        3        4        5        6        7
var state = [not_post, post, receive, perform, evaluate, taccept, treject, finish];
var task_state = state[0];
var escrowC;
var<Blockchain> blockchain;
#define numShares 3;

PerformTransactions() = PostTask(consumerNode, 30); ReceiveTask(providerNode); PerformTask(providerNode); EvaluateTask(consumerNode); (AcceptTask(consumerNode) [] RejectTask(consumerNode)); FinishTask(providerNode);
			            
PostTask(vl, deposit) = [vl == consumerNode && task_state == state[0] && deposit >= minDeposit && deposit <= maxDeposit] post_task {
			task_state = state[1]; 
			escrowC = consumerNode.SubmitDeposit(deposit);
			blockchain.SetEscrowAmount(escrowC);
			consumerNode.UpdateNumActivities(1);
			} -> Skip;
			
ReceiveTask(vl) = [vl == providerNode && task_state == state[1]] receive_task {
			task_state = state[2];
			} -> Skip;
			
PerformTask(vl) = [vl == providerNode && task_state == state[2]] perform_task {
			task_state = state[3];
			} -> Skip;
			
EvaluateTask(vl) = [vl == consumerNode && task_state == state[3]] evaluate_task {
			task_state = state[4];
			} -> Skip;
			
AcceptTask(vl) = [vl == consumerNode && task_state == state[4]] accept_task {
			task_state = state[5];
			} -> Skip;
			
RejectTask(vl) = [vl == consumerNode && task_state == state[4]] reject_task {
			task_state = state[6];
			blockchain.RemoveEscrowAmount(escrowC/numShares);
			consumerNode.AddDeposit(escrowC/numShares);
			} -> Skip;
			
FinishTask(vl) = [vl == providerNode && task_state == state[5]] task_finish {
			task_state = state[7];
			blockchain.RemoveEscrowAmount(escrowC/numShares);
			providerNode.AddDeposit(escrowC/numShares);
			providerNode.UpdateNumActivities(1)
			} -> Skip;

#define K 4;
Selection() =  [managementNodes.GetLength() > 0 && validatorNodes.GetLength() > 0] 
				 (LeaderSelection() || SelectValidator(K)); 
				 
var<ManagementNode> mn1;
var<ManagementNode> mn2;
var<ManagementNode> tempLeader;
var<ManagementNode> selectedLeader;
var leaderSelected = 0;
var rd = 0;
var escrowL;

LeaderSelection() = leaderSelection{
					var index = 0;
					mn1 = managementNodes.GetNode(index);
					tempLeader = mn1;
					tempLeader.UpdateNumParticipated(1);
					while(index < managementNodes.GetLength()-1) {
						mn2 = managementNodes.GetNode(index+1);
						mn2.UpdateNumParticipated(1);
						var depositRatio1 = tempLeader.GetDeposit()/managementNodes.GetTotalDeposit();
						var activityRate1 = tempLeader.GetNumActivities()/tempLeader.GetNumSelected();
						var missedRate1 = tempLeader.GetNumMisses()/tempLeader.GetNumParticipated();
						var depositRatio2 = mn2.GetDeposit()/managementNodes.GetTotalDeposit();
						var activityRate2 = mn2.GetNumActivities()/mn1.GetNumSelected();
						var missedRate2 = mn2.GetNumMisses()/managementNodes.GetTotalNumMisses();
						if (((depositRatio1 + activityRate1 + missedRate1)/3) >      
        		   			((depositRatio2 + activityRate2 + missedRate2)/3)){
        		   			index = index+1;
						}
						else if (((depositRatio1 + activityRate1 + missedRate1)/3) <      
        		   			    ((depositRatio2 + activityRate2 + missedRate2)/3))  {
									tempLeader = mn2;
									index = index+1;
						}
						else if (((depositRatio1 + activityRate1 + missedRate1)/3) ==      
        		   			((depositRatio2 + activityRate2 + missedRate2)/3)) {
        		   				if ((tempLeader.computeHash(tempLeader.GetMId(), (depositRatio1 + activityRate1 + missedRate1)/3)) > 
        		   					(mn2.computeHash(mn2.GetMId(), (depositRatio2 + activityRate2 + missedRate2)/3))) {
        		   					tempLeader = mn2;
									index = index+1;	
        		   				}
        		   				else {
        		   					index = index+1;
        		   				}
        		   		}
					}
					selectedLeader = tempLeader;
					leaderSelected = 1;
					selectedLeader.UpdateNumSelected(1);
					selectedLeader.SetRound(rd);
					escrowL = selectedLeader.SubmitDeposit(selectedLeader.GetDeposit());
					blockchain.SetEscrowAmount(escrowL);
					selectedLeader.SetDeposit(0);
} -> Skip; 

var<ValidatorNode> vn1;
var<ValidatorNode> vn2;
var<ValidatorNodes> trustedValidatorNodes;
var escrowV;
var valSelected = 0;

SelectValidator(k) = selectkval{
					var index1 = 0;
					var index2 = 1;
					while(index1 < validatorNodes.GetLength()-1 && index1 < k) {
						while(index2 < validatorNodes.GetLength()) {
							vn1 = validatorNodes.GetNode(index1);
					        vn2 = validatorNodes.GetNode(index2);
					        var depsitRatio1 = vn1.GetDeposit()/validatorNodes.GetTotalDeposit();
					        var activityRate1 = vn1.GetNumActivities()/vn1.GetNumSelected();
					        var depsitRatio2 = vn2.GetDeposit()/validatorNodes.GetTotalDeposit();
					        var activityRate2 = vn2.GetNumActivities()/vn2.GetNumSelected();
							if (((depsitRatio1 + activityRate1)/2) >= 
        						((depsitRatio2 + activityRate2)/2)){
                    			validatorNodes.SetNode(index1, vn1); 
                    			validatorNodes.SetNode(index2, vn2); 
                    			index2++;
                			}  
                			else {
                				validatorNodes.SetNode(index1, vn2); 
                    			validatorNodes.SetNode(index2, vn1); 
                    			index2++;
                			}
						}
						var tn = validatorNodes.GetNode(index1);
						tn.UpdateNumSelected(1);
						escrowV = tn.SubmitDeposit(tn.GetDeposit());
					    blockchain.SetEscrowAmount(escrowV);
					    tn.SetDeposit(0);
						trustedValidatorNodes.AddNode(tn);
						index1++;
					}
					valSelected = 1;
	
} -> Skip;

#define maxTransactions 100;
var<ValidatorNode> tvn;


VoteForTransactions(t, vl) = [t > 0 && t <= maxTransactions] ([leaderSelected == 1 && valSelected == 1] selection_end -> voteTrans(t, vl) [] 
										   [leaderSelected == 0 || valSelected == 0] no_transaction_selected -> Skip) []
						 [t < 0] no_transaction_to_vote -> Skip;

var<Transactions> pendingTransactions;
var<Transaction> tran1;
var<Transaction> tran2;
var<Transactions> tTransactions;
var<TransactionsProposals> transactionsProposals;
var tsignature0 = new TransactionSignature(0);
var tsignature1 = new TransactionSignature(1);
var tsignature2 = new TransactionSignature(2);
var tsignature3 = new TransactionSignature(3);
var voteflag0 = 1;
var voteflag1 = 1;
var voteflag2 = 1;
var voteflag3 = 1;
channel ch01 0;
channel ch02 0;
channel ch03 0;
channel ch10 0;
channel ch12 0;
channel ch13 0;
channel ch20 0;
channel ch21 0;
channel ch23 0;
channel ch30 0;
channel ch31 0;
channel ch32 0;
var<TransactionVote> tempTVote0;
var<TransactionVote> tempTVote1;
var<TransactionVote> tempTVote2;
var<TransactionVote> tempTVote3;
var<TransactionVoteSet> tvotes0;
var<TransactionVoteSet> tvotes1;
var<TransactionVoteSet> tvotes2;
var<TransactionVoteSet> tvotes3;

voteTrans(t, vl) = vote.t {
				var index1 = 0;
				while(index1 < trustedValidatorNodes.GetLength()-1) {
					tvn = trustedValidatorNodes.GetNode(index1);
					index1++;
					var index2 = 0;
					while(index2 < pendingTransactions.GetLength()-1 && index2 < t && vl == tvn.GetVId()) {
						tran1 = pendingTransactions.Get(index2);
						tTransactions.Set(index2, tran1);
						index2++;
					}
					transactionsProposals.Set(index1, new TransactionProposal(tTransactions, new TransactionSignature(index2))); 
				}
				} -> ([vl == 0] VoteToTransaction_0(); (
								([voteflag0 == 1] (ch01!tempTVote0 -> Skip || ch02!tempTVote0 -> Skip || ch03!tempTVote0 -> Skip) [] [voteflag0 == 0] Skip)
								|| 
								([voteflag1 == 1] ch10?y { tvotes0.Add(y) } -> Skip [] [voteflag1 == 0] Skip)
								|| 
								([voteflag2 == 1] ch20?y { tvotes0.Add(y) } -> Skip [] [voteflag2 == 0] Skip)
								|| 
								([voteflag3 == 1] ch30?y { tvotes0.Add(y) } -> Skip [] [voteflag3 == 0] Skip)
							) []
					  [vl == 1] VoteToTransaction_1(); (
								([voteflag1 == 1] (ch10!tempTVote1 -> Skip || ch12!tempTVote1 -> Skip || ch13!tempTVote1 -> Skip) [] [voteflag1 == 0] Skip)
								|| 
								([voteflag0 == 1] ch01?y { tvotes1.Add(y) } -> Skip [] [voteflag0 == 0] Skip)
								|| 
								([voteflag2 == 1] ch21?y { tvotes1.Add(y) } -> Skip [] [voteflag2 == 0] Skip)					
								||
								([voteflag3 == 1] ch31?y { tvotes1.Add(y) } -> Skip [] [voteflag3 == 0] Skip)
							) []
					  [vl == 2] VoteToTransaction_2(); (
								([voteflag2 == 1] (ch20!tempTVote2 -> Skip || ch21!tempTVote2 -> Skip || ch23!tempTVote2 -> Skip) [] [voteflag2 == 0] Skip)
								|| 
								([voteflag0 == 1] ch02?y { tvotes2.Add(y) } -> Skip [] [voteflag0 == 0] Skip)
								|| 
								([voteflag1 == 1] ch12?y { tvotes2.Add(y) } -> Skip [] [voteflag1 == 0] Skip)
								|| 
								([voteflag3 == 1] ch32?y { tvotes2.Add(y) } -> Skip [] [voteflag3 == 0] Skip)	
							) []
					  [vl == 3] VoteToTransaction_3(); (
								([voteflag3 == 1] (ch30!tempTVote3 -> Skip || ch31!tempTVote3 -> Skip || ch32!tempTVote3 -> Skip) [] [voteflag3 == 0] Skip)
								|| 
								([voteflag0 == 1] ch03?y { tvotes3.Add(y) } -> Skip [] [voteflag0 == 0] Skip)
								|| 
								([voteflag1 == 1] ch13?y { tvotes3.Add(y) } -> Skip [] [voteflag1 == 0] Skip)
								||
								([voteflag2 == 1] ch23?y { tvotes3.Add(y) } -> Skip [] [voteflag2 == 0] Skip)
							));
							
var<TransactionProposal> tempTProposal0;
var<TransactionProposal> tempTProposal1;
var<TransactionProposal> tempTProposal2;
var<TransactionProposal> tempTProposal3;
var voteBehaviour[PNodes];
#define Honest_Vote 0;
#define No_Vote 3;
var<Transactions> tempProposedTransaction0;
var<Transactions> tempProposedTransaction1;
var<Transactions> tempProposedTransaction2;
var<Transactions> tempProposedTransaction3;
				
VoteToTransaction_0() = 
	validateTProposal.0 {
			tempTProposal0 = transactionsProposals.Get(0); 
			tempProposedTransaction0 = tempTProposal0.GetTransactions();	
		if(voteBehaviour[0] == Honest_Vote) {tempTVote0 = new TransactionVote(tempProposedTransaction0, tsignature0);	
		tempTVote0.updateVotes(1);}	
		else if(voteBehaviour[0] == No_Vote) {voteflag0 = 0} 													
		tvotes0.Add(tempTVote0);
	}  -> Skip;

VoteToTransaction_1() = 
	validateTProposal.1 {
			tempTProposal1 = transactionsProposals.Get(1); 
			tempProposedTransaction1 = tempTProposal1.GetTransactions();	
		if(voteBehaviour[1] == Honest_Vote) {tempTVote1 = new TransactionVote(tempProposedTransaction1, tsignature1);	tempTVote1.updateVotes(1);}	
		else if(voteBehaviour[1] == No_Vote) {voteflag1 = 0} 														
		tvotes1.Add(tempTVote1);
	}  -> Skip;
	
VoteToTransaction_2() = 
	validateTProposal.2 {
			tempTProposal2 = transactionsProposals.Get(2); 
			tempProposedTransaction2 = tempTProposal2.GetTransactions();	
		if(voteBehaviour[2] == Honest_Vote) {tempTVote2 = new TransactionVote(tempProposedTransaction2, tsignature2);	tempTVote2.updateVotes(1);}	
		else if(voteBehaviour[2] == No_Vote) {voteflag2 = 0} 														
		tvotes2.Add(tempTVote2);
	}  -> Skip;
	
VoteToTransaction_3() = 
	validateTProposal.3 {
			tempTProposal3 = transactionsProposals.Get(3); 
			tempProposedTransaction3 = tempTProposal3.GetTransactions();	
		if(voteBehaviour[3] == Honest_Vote) {tempTVote3 = new TransactionVote(tempProposedTransaction3, tsignature3);	tempTVote3.updateVotes(1);}	
		else if(voteBehaviour[3] == No_Vote) {voteflag3 = 0} 														
		tvotes3.Add(tempTVote3);
	}  -> Skip;

var<Transactions> votedTransactions;
var<Transactions> maxVotedTransactions;
var<Blocks> lockedBlocks;

TransWithMaxVotes(t) = trans {	
		var index1 = 0;
		var index2 = 1;
		while(index1 < votedTransactions.GetLength()-1 && index1 < t) {
			while(index2 < votedTransactions.GetLength()) {
				tran1 = votedTransactions.Get(index1);
				tran2 = votedTransactions.Get(index2);
				if (tran1.getVotes() >= tran2.getVotes()){
					votedTransactions.Set(index1, tran1);
					votedTransactions.Set(index2, tran2);
					index2++;
				}
				else {
					votedTransactions.Set(index1, tran2);
					votedTransactions.Set(index2, tran1);
					index2++;
				}
				maxVotedTransactions.Set(index1, tran1);
				index1++;
			}
		}
} -> Skip;

var<Block> proposedBlock;
var<Block> prevBlock;
var<BlocksProposals> blocksProposals;
#define initialHash -1;
var <BlockProposal> blockProposal;

ProposeAndBroadcast(b) = 
	[selectedLeader.GetRound() == b] proposeBlock.b {
		proposedBlock = lockedBlocks.Get(b);
		if (proposedBlock.GetBlockHash() == initialHash){
			prevBlock = blockchain.GetPeekBlock();
			proposedBlock = new Block(b, selectedLeader, prevBlock.GetBlockHash(), maxVotedTransactions);
		}
		blocksProposals.SetProposal(b, new BlockProposal(proposedBlock, new BlockSignature(b)))
	} -> 
	((
			[b == 0] (ch01!blocksProposals.GetProposal(b) -> Skip || ch02!blocksProposals.GetProposal(b) -> Skip || ch03!blocksProposals.GetProposal(b) -> Skip) []	
			[b == 1] (ch10!blocksProposals.GetProposal(b) -> Skip || ch12!blocksProposals.GetProposal(b) -> Skip || ch13!blocksProposals.GetProposal(b) -> Skip ) []
			[b == 2] (ch20!blocksProposals.GetProposal(b) -> Skip || ch21!blocksProposals.GetProposal(b) -> Skip || ch23!blocksProposals.GetProposal(b) -> Skip ) []
			[b == 3] (ch30!blocksProposals.GetProposal(b) -> Skip || ch31!blocksProposals.GetProposal(b) -> Skip || ch32!blocksProposals.GetProposal(b) -> Skip ) 
			
		); Skip)
	[]
	[b == 0] (ch10?y -> {blocksProposals.SetProposal(b, y)} -> Skip [] ch20?y -> {blocksProposals.SetProposal(b, y)} -> Skip [] ch30?y -> {blocksProposals.SetProposal(b, y)} -> Skip )  
	[]
	[b == 1] (ch01?y -> {blocksProposals.SetProposal(b, y)} -> Skip [] ch21?y -> {blocksProposals.SetProposal(b, y)} -> Skip [] ch31?y -> {blocksProposals.SetProposal(b, y)} -> Skip ) 
	[]
	[b == 2] (ch02?y -> {blocksProposals.SetProposal(b, y)} -> Skip [] ch12?y -> {blocksProposals.SetProposal(b, y)} -> Skip [] ch32?y -> {blocksProposals.SetProposal(b, y)} -> Skip )
	[]
	[b == 3] (ch03?y -> {blocksProposals.SetProposal(b, y)} -> Skip [] ch13?y -> {blocksProposals.SetProposal(b, y)} -> Skip [] ch23?y -> {blocksProposals.SetProposal(b, y)} -> Skip);

var<BlockVote> tempBVote0;
var<BlockVote> tempBVote1;
var<BlockVote> tempBVote2;
var<BlockVote> tempBVote3;
var<BlockVoteSet> bvotes0;
var<BlockVoteSet> bvotes1;
var<BlockVoteSet> bvotes2;
var<BlockVoteSet> bvotes3;

VoteToBlock(b) = 
	[b == 0] propose_end -> VoteToBlock_0(); (
								([voteflag0 == 1] (ch01!tempBVote0 -> Skip || ch02!tempBVote0-> Skip || ch03!tempBVote0 -> Skip) [] [voteflag0 == 0] Skip)
								|| 
								([voteflag1 == 1] ch10?y { bvotes0.Add(y) } -> Skip [] [voteflag1 == 0] Skip)
								|| 
								([voteflag2 == 1] ch20?y { bvotes0.Add(y) } -> Skip [] [voteflag2 == 0] Skip)
								|| 
								([voteflag3 == 1] ch30?y { bvotes0.Add(y) } -> Skip [] [voteflag3 == 0] Skip)
							)
	[]
	[b == 1] propose_end -> VoteToBlock_1(); (
								([voteflag1 == 1] (ch10!tempBVote1 -> Skip || ch12!tempBVote1 -> Skip || ch13!tempBVote1 -> Skip) [] [voteflag1 == 0] Skip)
								|| 
								([voteflag0 == 1] ch01?y { bvotes1.Add(y) } -> Skip [] [voteflag0 == 0] Skip)
								|| 
								([voteflag2 == 1] ch21?y { bvotes1.Add(y) } -> Skip [] [voteflag2 == 0] Skip)					
								||
								([voteflag3 == 1] ch31?y { bvotes1.Add(y) } -> Skip [] [voteflag3 == 0] Skip)
							)
	[]
	[b == 2] propose_end -> VoteToBlock_2(); (
								([voteflag2 == 1] (ch20!tempBVote2 -> Skip || ch21!tempBVote2 -> Skip || ch23!tempBVote2 -> Skip) [] [voteflag2 == 0] Skip)
								|| 
								([voteflag0 == 1] ch02?y { bvotes2.Add(y) } -> Skip [] [voteflag0 == 0] Skip)
								|| 
								([voteflag1 == 1] ch12?y { bvotes2.Add(y) } -> Skip [] [voteflag1 == 0] Skip)
								|| 
								([voteflag3 == 1] ch32?y { bvotes2.Add(y) } -> Skip [] [voteflag3 == 0] Skip)	
							)
	[]
	[b == 3] propose_end -> VoteToBlock_3(); (
								([voteflag3 == 1] (ch30!tempBVote3 -> Skip || ch31!tempBVote3 -> Skip || ch32!tempBVote3 -> Skip) [] [voteflag3 == 0] Skip)
								|| 
								([voteflag0 == 1] ch03?y { bvotes3.Add(y) } -> Skip [] [voteflag0 == 0] Skip)
								|| 
								([voteflag1 == 1] ch13?y { bvotes3.Add(y) } -> Skip [] [voteflag1 == 0] Skip)
								||
								([voteflag2 == 1] ch23?y { bvotes3.Add(y) } -> Skip [] [voteflag2 == 0] Skip));
							

var<BlockProposal> tempProposal0;
var<BlockProposal> tempProposal1;
var<BlockProposal> tempProposal2;
var<BlockProposal> tempProposal3;
var<Block> tempProposedBlock0;	
var<Block> tempProposedBlock1;	
var<Block> tempProposedBlock2;	
var<Block> tempProposedBlock3;
var<Blockchain> blockchain0;
var<Blockchain> blockchain1;
var<Blockchain> blockchain2;
var<Blockchain> blockchain3;
var bsignature0 = new BlockSignature(0);
var bsignature1 = new BlockSignature(1);
var bsignature2 = new BlockSignature(2);
var bsignature3 = new BlockSignature(3);
				
VoteToBlock_0() = 
	validateProposal.0 {
			tempProposal0 = blocksProposals.GetProposal(0); 
			tempProposedBlock0 = tempProposal0.GetBlock();	
			var invalidBlock = blockchain0.ContainsBlock(tempProposedBlock0);
			if(invalidBlock) {
				tempProposedBlock0 = new Block();	
			}
		if(voteBehaviour[0] == Honest_Vote) {tempBVote0 = new BlockVote(tempProposedBlock0.GetBlockHash(), bsignature0); tempBVote0.updateVotes(1);}	
		else if(voteBehaviour[0] == No_Vote) {voteflag0 = 0} 														
		bvotes0.Add(tempBVote0);
	}  -> Skip;
	
VoteToBlock_1() = 
	validateProposal.1 {
			tempProposal1 = blocksProposals.GetProposal(1);
			tempProposedBlock1 = tempProposal1.GetBlock();
			var invalidBlock = blockchain1.ContainsBlock(tempProposedBlock1);
			if(invalidBlock) {
				tempProposedBlock1 = new Block();
			}	
		if(voteBehaviour[1] == Honest_Vote && !blockchain1.ContainsBlock(tempProposedBlock1)) {tempBVote1 = new BlockVote(tempProposedBlock1.GetBlockHash(), bsignature1); tempBVote1.updateVotes(1);}
		else if(voteBehaviour[1] == No_Vote) {voteflag1 = 0}
		bvotes1.Add(tempBVote1);
	} -> Skip;

VoteToBlock_2() = 
	validateProposal.2 {
			tempProposal2 = blocksProposals.GetProposal(2);
			tempProposedBlock2 = tempProposal2.GetBlock();
			var invalidBlock = blockchain2.ContainsBlock(tempProposedBlock2);
			if(invalidBlock) {
				tempProposedBlock2 = new Block();
			}
			tempBVote2 = new BlockVote(tempProposedBlock2.GetBlockHash(), bsignature2);
			if(voteBehaviour[2] == Honest_Vote && !blockchain2.ContainsBlock(tempProposedBlock2)) {tempBVote2 = new BlockVote(tempProposedBlock2.GetBlockHash(), bsignature2); tempBVote2.updateVotes(1);}
			else if(voteBehaviour[2] == No_Vote) {voteflag2 = 0}
			bvotes2.Add(tempBVote2);
		//}
	} ->  Skip;
	
VoteToBlock_3() = 
	validateProposal.3 {
			tempProposal3 = blocksProposals.GetProposal(3);
			tempProposedBlock3 = tempProposal3.GetBlock();
			var invalidBlock = blockchain3.ContainsBlock(tempProposedBlock3);
			if(invalidBlock) {
				tempProposedBlock3 = new Block();
			}
			tempBVote3 = new BlockVote(tempProposedBlock3.GetBlockHash(), bsignature3);
			if(voteBehaviour[3] == Honest_Vote && !blockchain3.ContainsBlock(tempProposedBlock3)) {tempBVote3 = new BlockVote(tempProposedBlock3.GetBlockHash(), bsignature3); tempBVote3.updateVotes(1);}
			else if(voteBehaviour[3] == No_Vote) {voteflag3 = 0}
			bvotes3.Add(tempBVote3);
	} ->  Skip;

var<Block> curBlock;
var v;
#define valid 0;
#define Not_Valid 1;

isValidBlockchain() = validBlockchain{
			var index = blockchain.GetHeight();
			while (index <= blockchain.GetHeight() && index >= 2){
					curBlock = blockchain.GetBlock(index);
					prevBlock = blockchain.GetBlock(index-1);
					if (curBlock.GetBlockHash() != curBlock.computeHash()){
						v =  Not_Valid;	
					}
					if (curBlock.GetPrevHash() != prevBlock.GetBlockHash()){ 
						v =  Not_Valid;
					}
					else if (curBlock.GetBlockHash() == curBlock.computeHash() && curBlock.GetPrevHash() == prevBlock.GetBlockHash()){  
					v = valid;
					index--;
					}
			}
} -> Skip;


#define MajorityValidators 3;

AddBlock(b) = 
[b == 0 && v == valid] addtoBChain.b {
		tempProposedBlock0 = bvotes0.GetBlockWithMajorityVotes(MajorityValidators);
			if(tempProposedBlock0.GetBlockHash() != initialHash && untrustedLeader == false) {
				blockchain0.AddBlock(tempProposedBlock0)
			}
			
	} -> Skip
	[]
	[b == 1 && v == valid] addtoBChain.b {
		tempProposedBlock1 = bvotes1.GetBlockWithMajorityVotes(MajorityValidators); 
			if(tempProposedBlock1.GetBlockHash() != initialHash && untrustedLeader == false) {
				blockchain1.AddBlock(tempProposedBlock1)
			}
			
	} -> Skip
	[]
	[b == 2 && v == valid] addtoBChain.b {
		tempProposedBlock2 = bvotes2.GetBlockWithMajorityVotes(MajorityValidators);
			if(tempProposedBlock2.GetBlockHash() != initialHash && untrustedLeader == false) {
				blockchain2.AddBlock(tempProposedBlock2)
			}
			
	} -> Skip
	[]
	[b == 3 && v == valid] addtoBChain.b {
		tempProposedBlock3 = bvotes3.GetBlockWithMajorityVotes(MajorityValidators);
			if(tempProposedBlock3.GetBlockHash() != initialHash && untrustedLeader == false) {
				blockchain3.AddBlock(tempProposedBlock3)
			}
			
		} -> Skip;
		
UpdateTrustAndDeposit() = [blockchain0.ContainsBlock(tempProposedBlock0) || blockchain1.ContainsBlock(tempProposedBlock1) || 
					blockchain2.ContainsBlock(tempProposedBlock2) || blockchain3.ContainsBlock(tempProposedBlock3)]
					(UpdateLNumActivities(1); GetBlockGReward(escrowC/numShares); LDepositReturned(escrowL); 
					UpdatePMNumMisses(1); UpdateVNumActivities(1); GetBlockVReward(); TVDepositReturned(); Skip) []
				[!(blockchain0.ContainsBlock(tempProposedBlock0)) || !(blockchain1.ContainsBlock(tempProposedBlock1)) || 
					!(blockchain2.ContainsBlock(tempProposedBlock2)) || !(blockchain3.ContainsBlock(tempProposedBlock3))] maliciousLeader -> LLoseTrustAndDeposit() [] maliciousValidators -> VLoseTrustAndDeposit();

UpdateLNumActivities(l) = update {selectedLeader.UpdateNumActivities(l)} -> Skip;
GetBlockGReward(deposit) = getdep {blockchain.RemoveEscrowAmount(deposit); selectedLeader.AddDeposit(deposit)} -> Skip;
LDepositReturned(deposit) = getdep {blockchain.RemoveEscrowAmount(deposit); selectedLeader.AddDeposit(deposit)} -> Skip;

UpdatePMNumMisses(m) = update {
						var index = 0;
						while(index < managementNodes.GetLength()-1){
							mn1 = managementNodes.GetNode(index);
							if (mn1 != selectedLeader && mn1.GetNumMisses() < maxNumMisses){
							    mn1.UpdateNumMisses(m);
							}
							index++;
					}
					} -> Skip;
					
UpdateVNumActivities(a) = update {
					var index = 0;
					while(index < trustedValidatorNodes.GetLength()-1) {
						tvn = trustedValidatorNodes.GetNode(index);
						tvn.UpdateNumActivities(a);
						index++;
					}
					} -> Skip; 
					
GetBlockVReward() = vreward {
					var index = 0;
					while(index < trustedValidatorNodes.GetLength()-1) {
						tvn = trustedValidatorNodes.GetNode(index);
						blockchain.RemoveEscrowAmount((escrowC/numShares)/trustedValidatorNodes.GetLength()); 
						tvn.AddDeposit((escrowC/numShares)/trustedValidatorNodes.GetLength());
						index++;
					}
					} -> Skip; 
					
LLoseTrustAndDeposit() = ltrust {
				selectedLeader.SetNumActivities(0); selectedLeader.SetNumMisses(0);selectedLeader.SetDeposit(0); 
				} -> Skip;
					
VLoseTrustAndDeposit() = vltrust {
					var index = 0;
					while(index < trustedValidatorNodes.GetLength()-1) {
						tvn = trustedValidatorNodes.GetNode(index);
						tvn.SetNumActivities(0); tvn.SetDeposit(0); 
						index++;
					}
					} -> Skip; 
					
TVDepositReturned() = tvdep {
					var index = 0;
					while(index < trustedValidatorNodes.GetLength()-1) {
						tvn = trustedValidatorNodes.GetNode(index);
						escrowV = tvn.GetEscrow();
						blockchain.RemoveEscrowAmount(escrowV); 
						tvn.AddDeposit(escrowV);
						index++;
					}
					} -> Skip; 

#define maxRounds 5;

NextRound() = 
	[rd < maxRounds] nextround {
		rd++;
		lockedBlocks.Clear();
		bvotes0.Clear(); bvotes1.Clear(); bvotes2.Clear(); bvotes3.Clear(); 
		tvotes0.Clear(); tvotes1.Clear(); tvotes2.Clear(); tvotes3.Clear();
		lockedBlocks.Clear();
		managementNodes.Nullify(selectedLeader);
		validatorNodes.Nullify(trustedValidatorNodes);
		blockchain.Nullify(proposedBlock);
	} -> Consensus_Protocol()
	[]
	[rd >= maxRounds] Skip;
	
IntroduceMaliciousNodes(num_nodes, behavior) = {
	var c = 0; var node = 0; 
	while (c < num_nodes) {
		if(node != selectedLeader.GetRound()) {
			voteBehaviour[node] = behavior;
			c++;
		}
		node = (node + 1) % PNodes;
	} 
} -> Skip;


var<ManagementNode> untrustedLeaderNode;	
var untrustedLeader = false;
IntroduceUntrustedLeader() = {
	selectedLeader = untrustedLeaderNode;
	untrustedLeader = true;
} -> Skip;

#define Minority_Nodes 1;
#define Majority_Nodes 3;

Consensus_Protocol_With_Minority_Malicious_No_Vote() = IntroduceMaliciousNodes(Minority_Nodes, No_Vote); Consensus_Protocol();
Consensus_Protocol_With_Majority_Malicious_No_Vote() = IntroduceMaliciousNodes(Majority_Nodes, No_Vote); Consensus_Protocol();
Consensus_Protocol_With_Minority_Malicious_Honest_Vote() = IntroduceMaliciousNodes(Minority_Nodes, Honest_Vote); Consensus_Protocol();
Consensus_Protocol_With_Majority_Malicious_Honest_Vote() = IntroduceMaliciousNodes(Majority_Nodes, Honest_Vote); Consensus_Protocol();
Consensus_Protocol_With_Untrusted_Leader() = (||i:{0..PNodes-1}@(NodeInitialization(); PerformTransactions(); Selection(); IntroduceUntrustedLeader(); VoteForTransactions(T, i); ProposeAndBroadcast(i); VoteToBlock(i); isValidBlockchain();  AddBlock(i); UpdateTrustAndDeposit())); NextRound();


#assert Consensus_Protocol() deadlockfree;
#assert Consensus_Protocol_With_Minority_Malicious_No_Vote() deadlockfree;
#assert Consensus_Protocol_With_Majority_Malicious_No_Vote() deadlockfree;
#assert Consensus_Protocol_With_Minority_Malicious_Honest_Vote() deadlockfree;
#assert Consensus_Protocol_With_Majority_Malicious_Honest_Vote() deadlockfree;
#assert Consensus_Protocol_With_Untrusted_Leader() deadlockfree;


#define Consensus (!blockchain0.IsEmpty() && blockchain0.GetPeekBlock() == blockchain1.GetPeekBlock() && blockchain1.GetPeekBlock() == blockchain2.GetPeekBlock() && blockchain2.GetPeekBlock() == blockchain3.GetPeekBlock());

#assert Consensus_Protocol() |= <> Consensus;
#assert Consensus_Protocol_With_Minority_Malicious_No_Vote() |= <> Consensus;
#assert Consensus_Protocol_With_Majority_Malicious_No_Vote() |= <> Consensus;
#assert Consensus_Protocol_With_Minority_Malicious_Honest_Vote() |= <> Consensus;
#assert Consensus_Protocol_With_Majority_Malicious_Honest_Vote() |= <> Consensus;
#assert Consensus_Protocol_With_Untrusted_Leader() |= <> Consensus;

#define No_Blockchain_Fork (!blockchain0.IsEmpty() && proposedBlock == blockchain0.GetPeekBlock() && proposedBlock == blockchain1.GetPeekBlock() && proposedBlock == blockchain2.GetPeekBlock() && proposedBlock == blockchain3.GetPeekBlock());

#assert Consensus_Protocol() |= <> No_Blockchain_Fork;
#assert Consensus_Protocol_With_Minority_Malicious_No_Vote() |= <> No_Blockchain_Fork;
#assert Consensus_Protocol_With_Majority_Malicious_No_Vote() |= <> No_Blockchain_Fork;
#assert Consensus_Protocol_With_Minority_Malicious_Honest_Vote() |= <> No_Blockchain_Fork;
#assert Consensus_Protocol_With_Majority_Malicious_Honest_Vote() |= <> No_Blockchain_Fork; 
#assert Consensus_Protocol_With_Untrusted_Leader() |= <> No_Blockchain_Fork;

#define No_Selfish_Mining (!blockchain0.IsEmpty() && blockchain0.GetBlockLeader(blockchain0.GetPeekBlock()) == blockchain1.GetBlockLeader(blockchain1.GetPeekBlock()) && 
							blockchain1.GetBlockLeader(blockchain1.GetPeekBlock()) == blockchain2.GetBlockLeader(blockchain2.GetPeekBlock()) && 
							blockchain2.GetBlockLeader(blockchain2.GetPeekBlock()) == blockchain3.GetBlockLeader(blockchain3.GetPeekBlock()));

#assert Consensus_Protocol() |= <> No_Selfish_Mining;
#assert Consensus_Protocol_With_Minority_Malicious_No_Vote() |= <> No_Selfish_Mining;
#assert Consensus_Protocol_With_Majority_Malicious_No_Vote() |= <> No_Selfish_Mining;
#assert Consensus_Protocol_With_Minority_Malicious_Honest_Vote() |= <> No_Selfish_Mining;
#assert Consensus_Protocol_With_Majority_Malicious_Honest_Vote() |= <> No_Selfish_Mining;
#assert Consensus_Protocol_With_Untrusted_Leader() |= <> No_Selfish_Mining; 

#define No_Invalid_Block_Insertion (rd>0 && !blockchain0.ContainsDuplicateBlocks() && !blockchain1.ContainsDuplicateBlocks() && !blockchain2.ContainsDuplicateBlocks() && !blockchain3.ContainsDuplicateBlocks());

#assert Consensus_Protocol() |= <> No_Invalid_Block_Insertion;
#assert Consensus_Protocol_With_Minority_Malicious_No_Vote() |= <> No_Invalid_Block_Insertion;
#assert Consensus_Protocol_With_Majority_Malicious_No_Vote() |= <> No_Invalid_Block_Insertion;
#assert Consensus_Protocol_With_Minority_Malicious_Honest_Vote() |= <> No_Invalid_Block_Insertion;
#assert Consensus_Protocol_With_Majority_Malicious_Honest_Vote() |= <> No_Invalid_Block_Insertion;
#assert Consensus_Protocol_With_Untrusted_Leader() |= <> No_Invalid_Block_Insertion;

#define Safety No_Blockchain_Fork && No_Selfish_Mining;

#assert Consensus_Protocol() |= <> Safety;
#assert Consensus_Protocol_With_Minority_Malicious_No_Vote() |= <> Safety;
#assert Consensus_Protocol_With_Majority_Malicious_No_Vote() |= <> Safety;
#assert Consensus_Protocol_With_Minority_Malicious_Honest_Vote() |= <> Safety;
#assert Consensus_Protocol_With_Majority_Malicious_Honest_Vote() |= <> Safety;
#assert Consensus_Protocol_With_Untrusted_Leader() |= <> Safety;

#define Fault_Tolerance Consensus;

#assert Consensus_Protocol() |= <> Fault_Tolerance;
#assert Consensus_Protocol_With_Minority_Malicious_No_Vote() |= <> Fault_Tolerance;
#assert Consensus_Protocol_With_Majority_Malicious_No_Vote() |= <> Fault_Tolerance;
#assert Consensus_Protocol_With_Minority_Malicious_Honest_Vote() |= <> Fault_Tolerance;
#assert Consensus_Protocol_With_Majority_Malicious_Honest_Vote() |= <> Fault_Tolerance; 
#assert Consensus_Protocol_With_Untrusted_Leader() |= <> Fault_Tolerance;

#define trustedLeader (rd >= 0 && leaderSelected == 1);

#assert Consensus_Protocol() |= <>trustedLeader;
#assert Consensus_Protocol_With_Minority_Malicious_No_Vote() |= <> trustedLeader;
#assert Consensus_Protocol_With_Majority_Malicious_No_Vote() |= <> trustedLeader;
#assert Consensus_Protocol_With_Minority_Malicious_Honest_Vote() |= <> trustedLeader;
#assert Consensus_Protocol_With_Majority_Malicious_Honest_Vote() |= <> trustedLeader;

#define trustedValidators (rd >= 0 && valSelected == 1);

#assert Consensus_Protocol() |= <> trustedValidators;
#assert Consensus_Protocol_With_Minority_Malicious_No_Vote() |= <> trustedValidators;
#assert Consensus_Protocol_With_Majority_Malicious_No_Vote() |= <> trustedValidators;
#assert Consensus_Protocol_With_Minority_Malicious_Honest_Vote() |= <> trustedValidators;
#assert Consensus_Protocol_With_Majority_Malicious_Honest_Vote() |= <> trustedValidators;


